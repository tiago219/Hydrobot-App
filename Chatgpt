import { useEffect, useState } from "react";
import {
  View, Text, StyleSheet, FlatList, Image, Pressable, Alert, TextInput, Modal, TouchableOpacity, SafeAreaView,
} from "react-native";
import { getEvents, saveEventFromServer, deleteEvent, clearAllEvents, FireEvent } from "../storage/fireLog";
import { useLanguage } from "../context/LanguageContext";

const PALETTE = { bg: "#0a0a0a", card: "#121212", border: "#232323", text: "#e5e7eb", sub: "#9ca3af", accent: "#2b48ff", danger: "#ef4444" };

const texts = {
  pt: {
    title: "Dashboard",
    server: "Servidor:",
    placeholder: "http://192.168.4.2:8000",
    btnSave: "Registrar agora",
    saving: "Salvando...",
    empty1: "Sem eventos ainda.",
    empty2: "Quando o detector sinalizar fogo, capturaremos o snapshot automaticamente.\nVocê também pode tocar “Registrar agora”.",
    fire: "Detecção de fogo",
    clear: "Limpar",
    confirmClearTitle: "Limpar tudo",
    confirmClearBody: "Isso apagará todos os eventos e imagens. Continuar?",
    cancel: "Cancelar",
    delete: "Excluir",
    confirmDeleteTitle: "Excluir registro",
    confirmDeleteBody: "Deseja excluir este evento?",
    fail: "Falha ao salvar",
    failBody: "Verifique o servidor /snapshot e a rede.",
  },
  en: {
    title: "Dashboard",
    server: "Server:",
    placeholder: "http://192.168.4.2:8000",
    btnSave: "Save now",
    saving: "Saving...",
    empty1: "No events yet.",
    empty2: "When fire is detected, a snapshot is captured automatically.\nYou can also tap “Save now”.",
    fire: "Fire detection",
    clear: "Clear",
    confirmClearTitle: "Clear all",
    confirmClearBody: "This will delete all events and images. Continue?",
    cancel: "Cancel",
    delete: "Delete",
    confirmDeleteTitle: "Delete entry",
    confirmDeleteBody: "Do you want to delete this event?",
    fail: "Failed to save",
    failBody: "Check the /snapshot endpoint and network.",
  },
  es: {
    title: "Panel",
    server: "Servidor:",
    placeholder: "http://192.168.4.2:8000",
    btnSave: "Registrar ahora",
    saving: "Guardando...",
    empty1: "Sin eventos aún.",
    empty2: "Cuando se detecte fuego, se capturará una imagen automáticamente.\nTambién puedes tocar “Registrar ahora”.",
    fire: "Detección de fuego",
    clear: "Limpiar",
    confirmClearTitle: "Limpiar todo",
    confirmClearBody: "Esto borrará todos los eventos e imágenes. ¿Continuar?",
    cancel: "Cancelar",
    delete: "Eliminar",
    confirmDeleteTitle: "Eliminar registro",
    confirmDeleteBody: "¿Deseas eliminar este evento?",
    fail: "Error al guardar",
    failBody: "Revisa /snapshot y la red.",
  },
};

const DEFAULT_SERVER = "http://192.168.4.2:8000";

export default function DashboardScreen() {
  const { lang } = useLanguage();
  const T = texts[lang];

  const [server, setServer] = useState<string>(DEFAULT_SERVER);
  const [items, setItems] = useState<FireEvent[]>([]);
  const [refreshing, setRefreshing] = useState(false);
  const [preview, setPreview] = useState<FireEvent | null>(null);
  const [busy, setBusy] = useState(false);

  async function load() {
    setRefreshing(true);
    try { setItems(await getEvents()); } finally { setRefreshing(false); }
  }
  useEffect(() => { load(); }, []);

  async function handleRegisterNow() {
    try {
      setBusy(true);
      const ev = await saveEventFromServer(server);
      setItems((prev) => [ev, ...prev]);
    } catch (e) {
      Alert.alert(T.fail, T.failBody);
    } finally {
      setBusy(false);
    }
  }

  function confirmDelete(ev: FireEvent) {
    Alert.alert(T.confirmDeleteTitle, T.confirmDeleteBody, [
      { text: T.cancel, style: "cancel" },
      { text: T.delete, style: "destructive", onPress: async () => {
          await deleteEvent(ev.id);
          setItems((prev) => prev.filter((x) => x.id !== ev.id));
        }
      },
    ]);
  }

  function confirmClearAll() {
    Alert.alert(T.confirmClearTitle, T.confirmClearBody, [
      { text: T.cancel, style: "cancel" },
      { text: T.clear, style: "destructive", onPress: async () => { await clearAllEvents(); setItems([]); } },
    ]);
  }

  const renderItem = ({ item }: { item: FireEvent }) => {
    const dateStr = new Date(item.ts).toLocaleString();
    return (
      <Pressable onPress={() => setPreview(item)} style={styles.card}>
        <Image source={{ uri: item.imageUri }} style={styles.thumb} />
        <View style={{ flex: 1 }}>
          <Text style={styles.title}>{T.fire}</Text>
          <Text style={styles.time}>{dateStr}</Text>
          <Text style={styles.path} numberOfLines={1}>{item.imageUri}</Text>
        </View>
        <Pressable onPress={() => confirmDelete(item)} style={styles.trashBtn}>
          <Text style={styles.trashTxt}>{T.delete}</Text>
        </Pressable>
      </Pressable>
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.headerTitle}>{T.title}</Text>
        <Pressable onPress={confirmClearAll} style={styles.clearAllBtn}>
          <Text style={styles.clearAllTxt}>{T.clear}</Text>
        </Pressable>
      </View>

      <View style={styles.row}>
        <Text style={styles.label}>{T.server}</Text>
        <TextInput
          value={server}
          onChangeText={setServer}
          placeholder={T.placeholder}
          autoCapitalize="none"
          autoCorrect={false}
          style={[styles.input, { flex: 1 }]}
        />
        <Pressable onPress={handleRegisterNow} style={[styles.btn, busy && { opacity: 0.6 }]} disabled={busy}>
          <Text style={styles.btnTxt}>{busy ? T.saving : T.btnSave}</Text>
        </Pressable>
      </View>

      <FlatList
        data={items}
        keyExtractor={(it) => it.id}
        renderItem={renderItem}
        refreshing={refreshing}
        onRefresh={load}
        contentContainerStyle={items.length === 0 && { flex: 1, justifyContent: "center" }}
        ListEmptyComponent={
          <View style={{ alignItems: "center" }}>
            <Text style={{ color: PALETTE.sub }}>{T.empty1}</Text>
            <Text style={{ color: PALETTE.sub, marginTop: 4, textAlign: "center" }}>{T.empty2}</Text>
          </View>
        }
      />

      <Modal visible={!!preview} transparent animationType="fade" onRequestClose={() => setPreview(null)}>
        <View style={styles.modalBg}>
          <TouchableOpacity style={styles.modalBg} activeOpacity={1} onPress={() => setPreview(null)}>
            {preview && <Image source={{ uri: preview.imageUri }} style={styles.fullImg} resizeMode="contain" />}
          </TouchableOpacity>
        </View>
      </Modal>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: PALETTE.bg },
  header: { flexDirection: "row", alignItems: "center", paddingHorizontal: 14, paddingVertical: 10, borderBottomWidth: StyleSheet.hairlineWidth, borderBottomColor: PALETTE.border },
  headerTitle: { color: PALETTE.text, fontSize: 18, fontWeight: "700", flex: 1 },
  clearAllBtn: { paddingHorizontal: 10, paddingVertical: 8, backgroundColor: PALETTE.danger, borderRadius: 8 },
  clearAllTxt: { color: "white", fontWeight: "700" },

  row: { flexDirection: "row", alignItems: "center", gap: 8, paddingHorizontal: 12, paddingVertical: 10, borderBottomWidth: StyleSheet.hairlineWidth, borderBottomColor: PALETTE.border },
  label: { color: PALETTE.sub, fontSize: 12 },
  input: { backgroundColor: PALETTE.card, color: PALETTE.text, borderRadius: 10, paddingHorizontal: 12, paddingVertical: 10, borderWidth: 1, borderColor: PALETTE.border, minWidth: 140 },
  btn: { backgroundColor: PALETTE.accent, paddingHorizontal: 12, paddingVertical: 10, borderRadius: 10 },
  btnTxt: { color: "white", fontWeight: "700" },

  card: { flexDirection: "row", alignItems: "center", gap: 12, paddingHorizontal: 12, paddingVertical: 10, borderBottomWidth: StyleSheet.hairlineWidth, borderBottomColor: PALETTE.border },
  thumb: { width: 84, height: 56, backgroundColor: "#000", borderRadius: 8 },
  title: { color: PALETTE.text, fontSize: 14, fontWeight: "700" },
  time: { color: PALETTE.sub, fontSize: 12, marginTop: 2 },
  path: { color: "#8b93a3", fontSize: 11, marginTop: 2 },

  trashBtn: { backgroundColor: "#333", paddingHorizontal: 10, paddingVertical: 8, borderRadius: 8 },
  trashTxt: { color: "#fca5a5", fontWeight: "700", fontSize: 12 },

  modalBg: { flex: 1, backgroundColor: "rgba(0,0,0,0.9)", alignItems: "center", justifyContent: "center" },
  fullImg: { width: "100%", height: "100%" },
}); 
