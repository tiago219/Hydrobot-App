
Perfeito — como essa firmware já roda o webserver padrão da ESP32-CAM (com /stream estável), segue um CameraScreen.tsx enxuto que exibe o MJPEG direto do ESP via WebView (sem passar pelo servidor). Ele inclui:




Campo para IP/host (ex.: hydrobot.local ou 192.168.x.y)


Player MJPEG em WebView com <img src="http://IP/stream">


Botão “Recarregar” (força bust de cache)


Status de conexão simples






Observação: MJPEG não renderiza em <Image> do RN; o jeito mais consistente no Android é um WebView com uma mini-página HTML contendo a tag <img> apontando para /stream.





HydroBotApp2/src/screens/CameraScreen.tsx


import React, { useMemo, useRef, useState } from "react";
import { View, Text, TextInput, Pressable, StyleSheet, Image } from "react-native";
import { WebView } from "react-native-webview";
import { useLanguage } from "../context/LanguageContext";

const PALETTE = { bg:"#0b0b0f", card:"#121218", border:"#25273a", accent:"#e6403a", text:"#e5e7eb" };

const textsByLang = {
  pt: {
    heroSubtitle: "Visualização da Câmera (ESP32-CAM)",
    espIp: "ESP:",
    placeholderIp: "hydrobot.local",
    reload: "Recarregar",
    connecting: "Conectando stream…",
    failed: "Falha ao carregar. Verifique IP e Wi-Fi."
  },
  en: {
    heroSubtitle: "Camera Viewer (ESP32-CAM)",
    espIp: "ESP:",
    placeholderIp: "hydrobot.local",
    reload: "Reload",
    connecting: "Connecting stream…",
    failed: "Failed to load. Check IP and Wi-Fi."
  },
  es: {
    heroSubtitle: "Visor de Cámara (ESP32-CAM)",
    espIp: "ESP:",
    placeholderIp: "hydrobot.local",
    reload: "Recargar",
    connecting: "Conectando stream…",
    failed: "Error al cargar. Verifica IP y Wi-Fi."
  },
};

const DEFAULT_IP = "hydrobot.local";
const appLogo = require("../../assets/logo.png");

function AppHero({ subtitle }: { subtitle: string }) {
  return (
    <View style={styles.hero}>
      <Image source={appLogo} style={styles.heroLogo} />
      <Text style={styles.heroTitle}>HydroBot</Text>
      <Text style={styles.heroSubtitle}>{subtitle}</Text>
    </View>
  );
}

export default function CameraScreen() {
  const { lang } = useLanguage();
  const T = textsByLang[lang];

  const [ip, setIp] = useState(DEFAULT_IP);
  const [status, setStatus] = useState<"idle"|"loading"|"ok"|"error">("idle");
  const [nonce, setNonce] = useState(0); // força reload

  const clean = (s:string)=> s.replace(/\/+$/,"");
  const streamUrl = useMemo(() => `http://${clean(ip)}/stream`, [ip]);

  // HTML minimalista para renderizar MJPEG e respeitar aspect ratio
  const html = useMemo(() => `
    <!doctype html>
    <html>
      <head>
        <meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1"/>
        <style>
          html,body { margin:0; padding:0; height:100%; background:#000; }
          #wrap { position:fixed; inset:0; display:flex; align-items:center; justify-content:center; background:#000; }
          img { max-width:100vw; max-height:100vh; width:100%; height:auto; object-fit:contain; }
        </style>
      </head>
      <body>
        <div id="wrap">
          <img id="mjpeg" src="${streamUrl}" onload="window.ReactNativeWebView.postMessage('ok')" onerror="window.ReactNativeWebView.postMessage('error')" />
        </div>
      </body>
    </html>
  `.trim(), [streamUrl, nonce]); // 'nonce' garante atualização do conteúdo

  const webref = useRef<WebView>(null);

  return (
    <View style={styles.container}>
      <AppHero subtitle={T.heroSubtitle} />

      <View style={styles.topbar}>
        <Text style={styles.label}>{T.espIp}</Text>
        <TextInput
          value={ip}
          onChangeText={setIp}
          placeholder={T.placeholderIp}
          placeholderTextColor="#8a93a5"
          autoCapitalize="none"
          autoCorrect={false}
          style={styles.input}
        />
        <Pressable
          onPress={() => { setStatus("loading"); setNonce(n => n+1); }}
          style={[styles.btn, { backgroundColor: "#2563eb" }]}
        >
          <Text style={styles.btnText}>{T.reload}</Text>
        </Pressable>
      </View>

      <View style={styles.statusRow}>
        <Text style={styles.statusText}>
          {status === "loading" && T.connecting}
          {status === "error" && T.failed}
          {status === "ok" && streamUrl}
          {status === "idle" && "—"}
        </Text>
      </View>

      <View style={{ flex:1, backgroundColor:"#000" }}>
        <WebView
          key={nonce}                    // força reconstrução
          ref={webref}
          originWhitelist={["*"]}
          source={{ html }}
          javaScriptEnabled
          domStorageEnabled
          allowsInlineMediaPlayback
          mediaPlaybackRequiresUserAction={false}
          onLoadStart={() => setStatus("loading")}
          onMessage={(e) => {
            const msg = String(e.nativeEvent.data || "");
            setStatus(msg === "ok" ? "ok" : "error");
          }}
          onError={() => setStatus("error")}
          onHttpError={() => setStatus("error")}
          setSupportMultipleWindows={false}
          // evita barras de rolagem
          scalesPageToFit={false}
          automaticallyAdjustContentInsets={false}
          style={{ backgroundColor:"#000" }}
        />
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container:{ flex:1, backgroundColor:PALETTE.bg },
  hero:{ alignItems:"center", paddingTop:12, paddingBottom:6 },
  heroLogo:{ width:80, height:80, marginBottom:6, resizeMode:"contain" },
  heroTitle:{ color:"#fff", fontSize:22, fontWeight:"800" },
  heroSubtitle:{ color:"#d1d5db", marginTop:2 },

  topbar:{ flexDirection:"row", alignItems:"center", flexWrap:"wrap",
           paddingHorizontal:12, paddingVertical:10, gap:8,
           backgroundColor:PALETTE.card, borderBottomWidth:StyleSheet.hairlineWidth, borderBottomColor:PALETTE.border },
  label:{ color:"#cfd3d8", fontSize:12 },
  input:{ backgroundColor:"#0b0d14", color:"white", borderRadius:8, paddingHorizontal:10, paddingVertical:8,
          borderWidth:1, borderColor:PALETTE.border, minWidth:160, flexGrow:1 },
  btn:{ paddingHorizontal:12, paddingVertical:10, borderRadius:10 },
  btnText:{ color:"white", fontWeight:"700" },

  statusRow:{ paddingHorizontal:12, paddingVertical:6, backgroundColor:"#0f1322",
              borderBottomWidth:StyleSheet.hairlineWidth, borderBottomColor:PALETTE.border },
  statusText:{ color:"#cbd5ff", fontSize:12 },
});



Como usar




Abra a tela, digite o host/IP do ESP (ex.: hydrobot.local ou 192.168.3.3).


Toque Recarregar → o status deve mudar para “Conectando stream…”, depois mostrar o próprio URL quando o <img> confirmar o carregamento.


Se aparecer “Falha ao carregar”, confirme no navegador do mesmo celular: http://SEU_IP/stream abre? Se sim, volte e toque Recarregar (ou troque para o IP numérico em vez do .local se o mDNS não resolver no Android).




Se quiser manter os botões de LED/UART depois, dá pra reintroduzir — mas para ver o vídeo dessa firmware, isso aqui basta.







































#include "esp_camera.h"
#include <WiFi.h>

// ===========================
// Select camera model in board_config.h
// ===========================
#include "board_config.h"

// ===========================
// Enter your WiFi credentials
// ===========================
const char *ssid = "HydroBot";
const char *password = "loud2025emibr";

void startCameraServer();
void setupLedFlash();

void setup() {
  Serial.begin(115200);
  Serial.setDebugOutput(true);
  Serial.println();

  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sccb_sda = SIOD_GPIO_NUM;
  config.pin_sccb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.frame_size = FRAMESIZE_UXGA;
  config.pixel_format = PIXFORMAT_JPEG;  // for streaming
  //config.pixel_format = PIXFORMAT_RGB565; // for face detection/recognition
  config.grab_mode = CAMERA_GRAB_WHEN_EMPTY;
  config.fb_location = CAMERA_FB_IN_PSRAM;
  config.jpeg_quality = 12;
  config.fb_count = 1;

  // if PSRAM IC present, init with UXGA resolution and higher JPEG quality
  //                      for larger pre-allocated frame buffer.
  if (config.pixel_format == PIXFORMAT_JPEG) {
    if (psramFound()) {
      config.jpeg_quality = 10;
      config.fb_count = 2;
      config.grab_mode = CAMERA_GRAB_LATEST;
    } else {
      // Limit the frame size when PSRAM is not available
      config.frame_size = FRAMESIZE_SVGA;
      config.fb_location = CAMERA_FB_IN_DRAM;
    }
  } else {
    // Best option for face detection/recognition
    config.frame_size = FRAMESIZE_240X240;
#if CONFIG_IDF_TARGET_ESP32S3
    config.fb_count = 2;
#endif
  }

#if defined(CAMERA_MODEL_ESP_EYE)
  pinMode(13, INPUT_PULLUP);
  pinMode(14, INPUT_PULLUP);
#endif

  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  }

  sensor_t *s = esp_camera_sensor_get();
  // initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1);        // flip it back
    s->set_brightness(s, 1);   // up the brightness just a bit
    s->set_saturation(s, -2);  // lower the saturation
  }
  // drop down frame size for higher initial frame rate
  if (config.pixel_format == PIXFORMAT_JPEG) {
    s->set_framesize(s, FRAMESIZE_QVGA);
  }

#if defined(CAMERA_MODEL_M5STACK_WIDE) || defined(CAMERA_MODEL_M5STACK_ESP32CAM)
  s->set_vflip(s, 1);
  s->set_hmirror(s, 1);
#endif

#if defined(CAMERA_MODEL_ESP32S3_EYE)
  s->set_vflip(s, 1);
#endif

// Setup LED FLash if LED pin is defined in camera_pins.h
#if defined(LED_GPIO_NUM)
  setupLedFlash();
#endif

  WiFi.begin(ssid, password);
  WiFi.setSleep(false);

  Serial.print("WiFi connecting");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");

  startCameraServer();

  Serial.print("Camera Ready! Use 'http://");
  Serial.print(WiFi.localIP());
  Serial.println("' to connect");
}

void loop() {
  // Do nothing. Everything is done in another task by the web server
  delay(10000);
}
